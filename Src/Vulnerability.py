#Class to model a vulnerability in the OSDVB database

class Vulnerability:

    #Constructor to define the attributes of a vulnerability
    def __init__(self,i,t,vie,dte,descrip,locat,attype,impct,soln,explt,discl,osd,specsoln,cre,sco,accvec,acccom,authen,confid,integ,avai):
        self.id = i
        self.title = t
        self.views = vie
        self.disclosureDate = dte
        self.description = descrip
        self.location = locat
        self.attackType = attype
        self.impact = impct
        self.solution = soln
        self.exploit = explt
        self.disclosure = discl
        self.osdvb = osd
        self.specificSolution = specsoln
        self.credit = cre
        self.cvssBaseScore = sco
        self.cvssAccessVector = accvec
        self.cvssAccessComplexity = acccom
        self.cvssAuthentication = authen
        self.cvssConfidentiality = confid
        self.cvssIntegrity = integ
        self.cvssAvailability = avai

    #Converts an instance of the class to a sring
    def __str__(self):
        return '%(i)s-%(t)s-%(vie)s-%(dte)s-%(descrip)s-%(locat)s-%(attype)s-%(impct)s-%(soln)s-%(explt)s-%(discl)s-%(osd)s-%(specsoln)s-%(cre)s-%(sco)s-%(accvec)s-%(acccom)s-%(authen)s-%(confid)s-%(integ)s-%(avai)s'%{"i":str(self.id),"t":self.title,"vie":self.views,"dte":self.disclosureDate,"descrip":self.description,"locat":self.location,"attype":self.attackType,"impct":self.impact,"soln":self.solution,"explt":self.exploit,"discl":self.disclosure,"osd":self.osdvb,"specsoln":self.specificSolution,"cre":self.credit,"sco":str(self.cvssBaseScore),"accvec":self.cvssAccessVector,"acccom":self.cvssAccessComplexity,"authen":self.cvssAuthentication,"confid":self.cvssConfidentiality,"integ":self.cvssIntegrity,"avai":self.cvssAvailability}

    #Test for equality with another object. Note that this only tests the
    #ids for equality,though for accuracy all attributes should be tested.
    #However,as this methods is only used in test code, it is not needed.
    def __eq__(self,other):
        if isinstance(other, self.__class__):
            if self.id == other.id:
                return True
            else:
                return False 
            
    
        
